- Angular is a framework for building reactive single-page web applications.
- To run a development server, run 'ng serve'
- Angular allows you to write dynamic HTML code using "components"
- Components always have html, css, and typescript files.
- Components all have a "selector" property which translates to an HTML selector
- By exporting values from the component's ts file, you can dynamically display them in the HTML using double curly brackets
    - Also known as "data-binding"
- Each component can utilize Angular modules, but they have to be declared to be used.
- In your angular.json file, you can make a majority of your configurations there.
- Configurations like the global style sheet, under the "styles" property.
- The only file served to the browser is the index.html file after compiling is complete.
- In the HTML file, angular knows to render the app component based on the selector defined in app.component.ts
- The @Component definition has a selector property with the value of "app-root"
- When the server function is run, the bundled JavaScript coded is appended to the index.html.
- The main.ts file actually kicks off the angular compiling and is passed the AppModule from the app.module.ts file.
- In the module, we tell Angular to bootstrap the AppComponent and parses it into the HTML.
- In the end, Angular is a JavaScript framework that changes the DOM at runtime.
- Overall, Angular is component based. You build your application by using multiple components.
- Each component has its own HTML, CSS, and JS/TS code. As well as its own business logic.
- All other components besides the root component will be added to the HTML of the root component.
- Generally all of your components will have their own folder with the name of the component.
- Each component is an empty TypeScript class that is transformed using the @Component decorator.
- A module is essentially a collection of Angular components to be rendered. Most of the time having a single module will suffice.
- To include a component in a module, you must first declare it under the declarations section of the module decorator.
- After that, you can utilize it in the HTML of the module components.
- You can create components manually, or with the Angular CLI using the command: 'ng generate component [NAME]'.
- A component can receive a templateUrl property with a link to the component's target HTML file.
- ALTERNATIVELY, a component can also receive a template property with a string of HTML (inline template).
- Similarly, CSS can be given to a component by URL or inline. Only difference is you can give a component multiple stylesheets.
- The selector of a component must be unique to other HTML elements, Angular components, or third-party components.
- The selector doesn't have to be used as an HTML element in the HTML file, it can also target elements by property, similar to CSS.
- Giving the selector property brackets will allow you to target HTML elements with that attribute.
- You can also select by class ".app-servers".